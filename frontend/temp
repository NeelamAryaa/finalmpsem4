// ===============previous code===================
// const groupBy = (array, key) => {
//   return array.reduce((result, currentValue) => {
//     (result[currentValue[key]] = result[currentValue[key]] || []).push(
//       currentValue
//     );
//     return result;
//   }, {});
// };

// app.get(`/api/getPaper/:id`, (req, res) => {
//   con.query(
//     `select q.qid, q.question, q.option1, q.option2, q.option3, q.option4, q.options, s.section_name from questions q
//     inner join sections s on q.section_id=s.id and q.qpaper_id=${req.params.id} `,
//     (err, rslt) => {
//       if (err) console.log(err);

//       const r = groupBy(rslt, "section_name");
//       // console.log(r);

//       res.send(r);
//     }
//   );
// });

// app.get(`/api/getSections/:id`, (req, res) => {
//   con.query(
//     `select s.section_name as section from sections s where s.paper_id=${req.params.id}`,
//     (err, result) => {
//       if (err) console.log(err);
//       res.send(result);
//     }
//   );
// });
// // ===============previous code ends===================

// ===============================================
// app.get(`/api/getPaper/:id`, (req, res) => {
//   con.query(
//     `select q.qid, q.question, q.option1, q.option2, q.option3, q.option4, s.section_name from questions q
//     inner join sections s on q.section_id=s.id and q.paper_id=${req.params.id} `,
//     (err, result) => {
//       if (err) console.log(err);

//       res.send(result);
//     }
//   );
// });

// app.get(`/api/getPaper/:id`, (req, res) => {
//   con.query(
//     `select q.qid, q.question, q.option1, q.option2, q.option3, q.option4, s.section_name from questions q
//     inner join sections s on q.section_id=s.id and q.paper_id=${req.params.id} `,
//     (err, result) => {
//       if (err) console.log(err);

//       // send paper as required format
//       console.log("section in getSection ", section.data);

//       res.send(result);
//     }
//   );
// });

// app.get("/api/getAllQuestions", (req, res) => {
//   con.query(`select * from questions`, (err, result) => {
//     if (err) console.log(err);
//     // res.send("yes it working");
//     res.send(result);
//   });
//   // res.send("show result");
//   console.log("result");
// });

// initial testing
// con.query(`select * from questions`, (err, res, fields) => {
//   if (err) {
//     return console.log(err);
//   }
//   return console.log(res);
// });

// module.exports = con;
// =====================================================

//====================Set User Score in DB====================
// app.post("/api/storeMarks/:user_id", (req, res) => {
//   const user_id = req.params.user_id;
//   const { qp_id, score } = req.body;
//   con.query(
//     `insert into marks (user_id, paper_id, score, attempt_no) values (?, ?, ?, ?)`,
//     [user_id, qp_id, score, new Date()],
//     (err, result) => {
//       if (err) {
//         console.log(err);
//         return res.status(400).json({ err: "Invalid data" });
//       } else {
//         console.log(result);
//         return res
//           .status(201)
//           .json({ msg: `marks uploaded successfully`, data: result });
//       }
//     }
//   );
// });

//====================Set User Score in DB end====================
